openapi: "3.0.0"
info:
  description: "Code generation"
  version: "0.0.1"
  title: "Demo Service Specification"

tags:
  - name: "user"
    description: "User tag for demo purposes"
servers:
  - url: http://localhost:8080/
    description: "localhost"

paths:
  /user/{id}:
    get:
      tags:
        - "user"
      summary: "Retrieves User by ID"
      operationId: "getUserById"
      parameters:
        - name: "id"
          in: "path"
          description: "retrieves user by user id"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        200:
          description: "Retrieves family members by person id"
          content:
            application/json:
              schema:
                type: "array"
                $ref: '#/components/schemas/User'
  /users:
    get:
      tags:
        - "user"
      summary: "List all users"
      operationId: "getUsers"
      responses:
        200:
          description: "List all users"
          content:
            application/json:
              schema:
                type: "array"
                $ref: '#/components/schemas/User'
    post:
      tags:
        - "user"
      description: Post a new user
      operationId: "createUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
              properties:
                firstName:
                  type: string
                lastName:
                  type: string

      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/400Error'


# Basic authentication
#security:
#  - BasicAuth: [ ]

components:
# Basic authentication
#  securitySchemes:
#    BasicAuth:
#      type: http
#      scheme: basic



  schemas:
    User:
      type: "object"
      required:
        - "id"
        - "firstName"
        - "lastName"
      properties:
        id:
          type: "integer"
          format: "int64"
        firstName:
          type: "string"
          example: "John"
        lastName:
          type: "string"
          example: "Doe"
        dateOfBirth:
          type: "string"
          example: "1992-10-05"
        gender:
          type: "string"
          enum:
            - "MALE"
            - "FEMALE"
            - "UNKNOWN"
  responses:
    400Error:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string